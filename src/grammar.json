{
  "$schema": "https://tree-sitter.github.io/tree-sitter/assets/schemas/grammar.schema.json",
  "name": "dataflex",
  "word": "identifier",
  "rules": {
    "source_file": {
      "type": "REPEAT",
      "content": {
        "type": "SYMBOL",
        "name": "_top_level_code"
      }
    },
    "_top_level_code": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "function_definition"
        },
        {
          "type": "SYMBOL",
          "name": "procedure_definition"
        },
        {
          "type": "SYMBOL",
          "name": "object_definition"
        },
        {
          "type": "SYMBOL",
          "name": "_statement"
        }
      ]
    },
    "function_definition": {
      "type": "SEQ",
      "members": [
        {
          "type": "ALIAS",
          "content": {
            "type": "PATTERN",
            "value": "Function",
            "flags": "i"
          },
          "named": true,
          "value": "keyword"
        },
        {
          "type": "FIELD",
          "name": "name",
          "content": {
            "type": "SYMBOL",
            "name": "identifier"
          }
        },
        {
          "type": "SYMBOL",
          "name": "_eol"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "SYMBOL",
              "name": "_statement_list"
            },
            {
              "type": "BLANK"
            }
          ]
        },
        {
          "type": "ALIAS",
          "content": {
            "type": "PATTERN",
            "value": "End_Function",
            "flags": "i"
          },
          "named": true,
          "value": "keyword"
        }
      ]
    },
    "procedure_definition": {
      "type": "SEQ",
      "members": [
        {
          "type": "ALIAS",
          "content": {
            "type": "PATTERN",
            "value": "Procedure",
            "flags": "i"
          },
          "named": true,
          "value": "keyword"
        },
        {
          "type": "FIELD",
          "name": "name",
          "content": {
            "type": "SYMBOL",
            "name": "identifier"
          }
        },
        {
          "type": "SYMBOL",
          "name": "_eol"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "SYMBOL",
              "name": "_statement_list"
            },
            {
              "type": "BLANK"
            }
          ]
        },
        {
          "type": "ALIAS",
          "content": {
            "type": "PATTERN",
            "value": "End_Procedure",
            "flags": "i"
          },
          "named": true,
          "value": "keyword"
        }
      ]
    },
    "object_definition": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "object_declarator"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_top_level_code"
          }
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "ALIAS",
              "content": {
                "type": "PATTERN",
                "value": "End_Object",
                "flags": "i"
              },
              "named": true,
              "value": "keyword"
            },
            {
              "type": "ALIAS",
              "content": {
                "type": "PATTERN",
                "value": "Cd_End_Object",
                "flags": "i"
              },
              "named": true,
              "value": "keyword"
            }
          ]
        }
      ]
    },
    "object_declarator": {
      "type": "SEQ",
      "members": [
        {
          "type": "ALIAS",
          "content": {
            "type": "PATTERN",
            "value": "Object",
            "flags": "i"
          },
          "named": true,
          "value": "keyword"
        },
        {
          "type": "FIELD",
          "name": "name",
          "content": {
            "type": "SYMBOL",
            "name": "identifier"
          }
        },
        {
          "type": "ALIAS",
          "content": {
            "type": "PATTERN",
            "value": "is",
            "flags": "i"
          },
          "named": true,
          "value": "keyword"
        },
        {
          "type": "ALIAS",
          "content": {
            "type": "PATTERN",
            "value": "a",
            "flags": "i"
          },
          "named": true,
          "value": "keyword"
        },
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "_eol"
        }
      ]
    },
    "_statement_list": {
      "type": "REPEAT1",
      "content": {
        "type": "SYMBOL",
        "name": "_statement"
      }
    },
    "_statement": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "move_statement"
        },
        {
          "type": "SYMBOL",
          "name": "unknown_command_statement"
        }
      ]
    },
    "move_statement": {
      "type": "SEQ",
      "members": [
        {
          "type": "ALIAS",
          "content": {
            "type": "PATTERN",
            "value": "Move",
            "flags": "i"
          },
          "named": true,
          "value": "keyword"
        },
        {
          "type": "SYMBOL",
          "name": "_expression"
        },
        {
          "type": "ALIAS",
          "content": {
            "type": "PATTERN",
            "value": "To",
            "flags": "i"
          },
          "named": true,
          "value": "keyword"
        },
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "_eol"
        }
      ]
    },
    "unknown_command_statement": {
      "type": "SEQ",
      "members": [
        {
          "type": "REPEAT1",
          "content": {
            "type": "SYMBOL",
            "name": "_expression"
          }
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "PATTERN",
              "value": ";"
            },
            {
              "type": "BLANK"
            }
          ]
        },
        {
          "type": "SYMBOL",
          "name": "_eol"
        }
      ]
    },
    "_expression": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "_literal"
        }
      ]
    },
    "identifier": {
      "type": "PATTERN",
      "value": "[a-zA-Z_][a-zA-Z_0-9]*"
    },
    "_literal": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "number_literal"
        },
        {
          "type": "SYMBOL",
          "name": "string_literal"
        }
      ]
    },
    "number_literal": {
      "type": "PATTERN",
      "value": "[0-9]+(\\.[0-9]+)?"
    },
    "string_literal": {
      "type": "PATTERN",
      "value": "\\\".*\\\""
    },
    "_eol": {
      "type": "PATTERN",
      "value": "[\\r\\n|\\n]"
    },
    "line_comment": {
      "type": "TOKEN",
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "STRING",
            "value": "//"
          },
          {
            "type": "PATTERN",
            "value": ".*"
          }
        ]
      }
    },
    "comment": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "/*"
        },
        {
          "type": "PATTERN",
          "value": "[^*]*\\*+([^/*][^*]*\\*+)*"
        },
        {
          "type": "STRING",
          "value": "/"
        }
      ]
    }
  },
  "extras": [
    {
      "type": "SYMBOL",
      "name": "comment"
    },
    {
      "type": "SYMBOL",
      "name": "line_comment"
    },
    {
      "type": "PATTERN",
      "value": "[\\s]"
    }
  ],
  "conflicts": [],
  "precedences": [],
  "externals": [],
  "inline": [],
  "supertypes": []
}
